name: OpenWearables CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run Bandit security scan
        run: |
          bandit -r openwearables/ -f json -o bandit-report.json || true
          bandit -r openwearables/ -f txt

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep
        run: |
          semgrep --config=auto openwearables/ --json --output semgrep-report.json || true

      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # Code Quality and Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy pylint
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run Black formatter check
        run: black --check --diff openwearables/ tests/

      - name: Run isort import sorting check
        run: isort --check-only --diff openwearables/ tests/

      - name: Run Flake8 linting
        run: flake8 openwearables/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run MyPy type checking
        run: mypy openwearables/ --ignore-missing-imports

      - name: Run Pylint
        run: pylint openwearables/ --disable=C0114,C0115,C0116 --max-line-length=88

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          - os: macos-latest
            python-version: "3.10"
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_openwearables
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev build-essential

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install postgresql

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Set up test environment
        run: |
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_openwearables"
          export REDIS_URL="redis://localhost:6379/0"
          export SECRET_KEY="test-secret-key-for-ci"
          export FLASK_ENV="testing"
          export OPENWEARABLES_MOCK="true"

      - name: Run unit tests
        run: |
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_openwearables"
          export REDIS_URL="redis://localhost:6379/0"
          export SECRET_KEY="test-secret-key-for-ci"
          export FLASK_ENV="testing"
          export OPENWEARABLES_MOCK="true"
          pytest tests/ -v --tb=short --cov=openwearables --cov-report=xml --cov-report=html

      - name: Run integration tests
        run: |
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_openwearables"
          export REDIS_URL="redis://localhost:6379/0"
          export SECRET_KEY="test-secret-key-for-ci"
          export FLASK_ENV="testing"
          export OPENWEARABLES_MOCK="true"
          pytest tests/ -m integration -v

      - name: Run performance tests
        run: |
          export DATABASE_URL="postgresql://postgres:test_password@localhost:5432/test_openwearables"
          export REDIS_URL="redis://localhost:6379/0"
          export SECRET_KEY="test-secret-key-for-ci"
          export FLASK_ENV="testing"
          export OPENWEARABLES_MOCK="true"
          pytest tests/ -m performance -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            pytest-report.xml

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test]
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_ENV=production
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.openwearables.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name openwearables-staging

      - name: Deploy to staging
        run: |
          envsubst < k8s/staging/deployment.yaml | kubectl apply -f -
          kubectl set image deployment/openwearables-app openwearables=${{ needs.build.outputs.image-tag }} -n staging
          kubectl rollout status deployment/openwearables-app -n staging --timeout=600s

      - name: Run smoke tests
        run: |
          kubectl wait --for=condition=ready pod -l app=openwearables -n staging --timeout=300s
          # Add smoke test commands here
          curl -f https://staging.openwearables.dev/api/v1/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://openwearables.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name openwearables-production

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          envsubst < k8s/production/deployment-green.yaml | kubectl apply -f -
          kubectl set image deployment/openwearables-app-green openwearables=${{ needs.build.outputs.image-tag }} -n production
          kubectl rollout status deployment/openwearables-app-green -n production --timeout=600s
          
          # Run health checks
          kubectl wait --for=condition=ready pod -l app=openwearables,slot=green -n production --timeout=300s
          
          # Switch traffic to green
          kubectl patch service openwearables-service -p '{"spec":{"selector":{"slot":"green"}}}' -n production
          
          # Clean up blue deployment
          kubectl delete deployment openwearables-app-blue -n production --ignore-not-found=true

      - name: Post-deployment verification
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Run comprehensive health checks
          curl -f https://openwearables.com/api/v1/health
          curl -f https://openwearables.com/api/v1/stats
          
          # Run end-to-end tests
          pytest tests/e2e/ -v --base-url=https://openwearables.com

  # Notify on completion
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'OpenWearables deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: 'OpenWearables deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 