version: '3.8'

services:
  # Main OpenWearables application
  openwearables:
    build:
      context: .
      target: production
    container_name: openwearables-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - openwearables_data:/app/data
      - openwearables_logs:/app/logs
      - openwearables_config:/app/config
    environment:
      - OPENWEARABLES_CONFIG=/app/config/config.json
      - OPENWEARABLES_LOG_LEVEL=INFO
      - FLASK_ENV=production
    depends_on:
      - redis
      - postgres
    networks:
      - openwearables-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (optional, for production scale)
  postgres:
    image: postgres:15-alpine
    container_name: openwearables-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: openwearables
      POSTGRES_USER: openwearables
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - openwearables-network
    ports:
      - "5432:5432"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: openwearables-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    networks:
      - openwearables-network
    ports:
      - "6379:6379"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: openwearables-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - openwearables_static:/var/www/static:ro
    depends_on:
      - openwearables
    networks:
      - openwearables-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: openwearables-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - openwearables-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: openwearables-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password_change_me}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - openwearables-network

  # Development service (override for dev environment)
  openwearables-dev:
    build:
      context: .
      target: development
    container_name: openwearables-dev
    volumes:
      - .:/app
      - openwearables_data:/app/data
      - openwearables_logs:/app/logs
    ports:
      - "5000:5000"
      - "8000:8000"  # For development server
    environment:
      - OPENWEARABLES_CONFIG=/app/config/dev_config.json
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    networks:
      - openwearables-network
    profiles:
      - dev

  # GPU-enabled service (for CUDA inference)
  openwearables-gpu:
    build:
      context: .
      target: gpu
    container_name: openwearables-gpu
    restart: unless-stopped
    ports:
      - "5001:5000"
    volumes:
      - openwearables_data:/app/data
      - openwearables_logs:/app/logs
      - openwearables_config:/app/config
    environment:
      - OPENWEARABLES_CONFIG=/app/config/gpu_config.json
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - openwearables-network
    profiles:
      - gpu

volumes:
  openwearables_data:
    driver: local
  openwearables_logs:
    driver: local
  openwearables_config:
    driver: local
  openwearables_static:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  openwearables-network:
    driver: bridge 